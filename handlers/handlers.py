# coding=utf-8
import asyncio
from aiogram import types
from aiogram.utils.exceptions import TelegramAPIError
from datetime import datetime

from misc import dp, bot, conn, cur
from handlers.add_func import to_del_mess, makegoodview
from handlers.User import User
from handlers.Chat import Chat
from handlers.game import Game
from handlers.bets import Bets
from handlers.shake import shake
from handlers.bonus import Bonus
from handlers.achievements import check_limit_money
from handlers.giveaway_start import create_db, start_giveaway


async def bonus_throttled(callback_query, *args, **kwargs):
    await bot.answer_callback_query(callback_query.id, "–ù–µ —Ç–æ—Ä–æ–ø–∏—Å—å")


async def trottled(callback_query, *args, **kwargs):
    await bot.answer_callback_query(callback_query.id, "–ù–µ —Ç–æ—Ä–æ–ø–∏—Å—å")


async def bet_trottled(message, *args, **kwargs):
    await message.reply("–ù–µ —Ç–æ—Ä–æ–ø–∏—Å—å")


async def advice_anti_spam(message, *args, **kwargs):
    await message.reply("–ù–µ —Å–ø–∞–º—å")


@dp.message_handler(commands=['start'])
async def start_message(message):
    userid = message.from_user.id
    chatid = message.chat.id
    if chatid == userid:
        startkb = types.ReplyKeyboardMarkup(resize_keyboard=True)
        itembtna = types.KeyboardButton('–ö–æ—Å—Ç–∏')
        trasti = types.KeyboardButton('–¢—Ä—è—Å—Ç–∏')
        startkb.add(itembtna, trasti)
        await bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –≤ Cube Bot!\n"
                                                "–ò—Å–ø—ã—Ç–∞–π —É–¥–∞—á—É, –±—Ä–æ—Å–∏–≤ –∫—É–±–∏–∫ üé≤\n"
                                                "–î–µ–ª–∞–π —Å—Ç–∞–≤–æ—á–∫–∏, —É–≥–∞–¥—ã–≤–∞–π —á–∏—Å–ª–∞\n"
                                                "–í—ã–∏–≥—Ä—ã–≤–∞–π –ª–∞–≤—çüí∞\n"
                                                "\n"
                                                "–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:\n"
                                                "/help - –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞\n"
                                                "/rules - –ø—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã\n"
                                                "/kosti - –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É\n"
                                                "/tryasti - –±—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫\n"
                                                "/lave - –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–∞–ª–∞–Ω—Å\n"
                                                "/bonuslave - –±–æ–Ω—É—Å\n"
                                                "/advice [—Ç–µ–∫—Å—Ç] - –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –¥–æ—Ä–∞–±–æ—Ç–æ–∫", reply_markup=startkb)
    else:
        await bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –≤ Cube Bot!\n"
                                                "–ò—Å–ø—ã—Ç–∞–π —É–¥–∞—á—É, –±—Ä–æ—Å–∏–≤ –∫—É–±–∏–∫ üé≤\n"
                                                "–î–µ–ª–∞–π —Å—Ç–∞–≤–æ—á–∫–∏, —É–≥–∞–¥—ã–≤–∞–π —á–∏—Å–ª–∞\n"
                                                "–í—ã–∏–≥—Ä—ã–≤–∞–π –ª–∞–≤—çüí∞\n"
                                                "\n"
                                                "–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:\n"
                                                "/help - –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞\n"
                                                "/rules - –ø—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã\n"
                                                "/kosti - –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É\n"
                                                "/trasti - –±—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫\n"
                                                "/lave - –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–∞–ª–∞–Ω—Å\n"
                                                "/bonuslave - –±–æ–Ω—É—Å\n"
                                                "/advice [—Ç–µ–∫—Å—Ç] - –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –¥–æ—Ä–∞–±–æ—Ç–æ–∫")


@dp.message_handler(commands=['rules'])
async def rules_for_player(message):
    if message.from_user.id == message.chat.id:
        await message.answer("–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 6üé≤\n\n"
                             "–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å:\n"
                             "‚Ä¢ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ö–æ—Å—Ç–∏ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ö–æ—Å—Ç–∏' –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã\n"
                             "‚Ä¢ —Å–¥–µ–ª–∞–π—Ç–µ —Å—Ç–∞–≤–∫—É\n"
                             "‚Ä¢ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¢—Ä—è—Å—Ç–∏ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–¢—Ä—è—Å—Ç–∏' –¥–ª—è –±—Ä–æ—Å–∫–∞ –∫—É–±–∏–∫–∞\n"
                             "\n"
                             "–°—Ç–∞–≤–∫–∏ –∏–º–µ—é—Ç –≤–∏–¥:\n"
                             "(—Å–∫–æ–ª—å–∫–æ) (—á–∏—Å–ª–æ(–∞) –∫—É–±–∏–∫–∞)\n"
                             "–ü—Ä–∏–º–µ—Ä:\n"
                             " 30 5-6 | 50 2")
    else:
        await message.reply("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É –≤ –ª–∏—á–∫–µ —Å –±–æ—Ç–æ–º")


@dp.message_handler(commands=['help'])
async def help_for_player(message):
    if message.from_user.id == message.chat.id:
        await message.answer("<b>–ò–≥—Ä–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n\n"
                             "<b>–ö–æ—Å—Ç–∏</b> - –∑–∞–ø—É—Å—Ç–∏—Ç—å –∏–≥—Ä—É\n\n"
                             "<b>–¢—Ä—è—Å—Ç–∏</b> - –±—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫\n\n"
                             "<b>–û—Ç–º–µ–Ω–∞</b> - –æ—Ç–º–µ–Ω–∞ —Å—Ç–∞–≤–æ–∫\n\n"
                             "<b>–õ–∞–≤—ç</b> - –∑—ã—Ä–Ω—É—Ç—å –Ω–∞–ª–∏—á–Ω—ã–µ\n\n"
                             "<b>–ë–æ–Ω—É—Å</b> - –∑–∞–±—Ä–∞—Ç—å –±–æ–Ω—É—Å (—Ä–∞–∑ –≤ 2 —á–∞—Å–∞)\n\n"
                             "<b>–°—Ç–∞–≤–∫–∏</b> - –∑—ã—Ä–Ω—É—Ç—å —à–æ –ø–æ—Å—Ç–∞–≤–∏–ª\n\n"
                             "<b>–ª–æ–≥–∏</b> - –∑—ã—Ä–Ω—É—Ç—å –Ω–∞ –∏—Å—Ç–æ—Ä–∏—é –≤—ã–ø–∞–¥–µ–Ω–∏—è —á–∏—Å–µ–ª(10 –∑–Ω–∞—á–µ–Ω–∏–π)\n\n"
                             "<b>+–≥ [—Å–∫–æ–ª—å–∫–æ] (–æ—Ç–≤–µ—Ç –Ω–∞ —Å–º—Å –≤ —á–∞—Ç–∞—Ö)</b> - –ø–µ—Ä–µ–¥–∞—Ç—å –¥–µ–Ω—é–∂–∫—É\n\n"
                             "<b>!—Ä–µ–π—Ç–∏–Ω–≥ | !—Ä–µ–π—Ç–∏–Ω–≥ 10</b> - —Ä–µ–π—Ç–∏–Ω–≥ –∏–≥—Ä–æ–∫–æ–≤\n\n"
                             "<b>!—Å—Ç–∞—Ç–∞</b> - –ª–∏—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n"
                             "<b>!—Ä–∞–∑–¥–∞—á–∞ [—Å–∫–æ–ª—å–∫–æ]</b> - —Ä–∞–∑–¥–∞—á–∞ –ª–∞–≤—ç (—Ä–∞–∑ –≤ —á–∞—Å, –Ω–µ –º–µ–Ω—å—à–µ 100 000"
                             " –∏ –Ω–µ –±–æ–ª—å—à–µ 10 000 000 000)\n\n"
                             "<b>%–ø</b> - –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —Å—Ç–∞–≤–∫—É —Å –ø—Ä–æ—à–ª–æ–π –∏–≥—Ä—ã\n\n"
                             "<b>%—É</b> - —É–¥–≤–æ–∏—Ç—å —Å—Ç–∞–≤–∫–∏\n\n"
                             "\n"
                             "<b>–ê–≤—Ç–æ—Ä –∏–¥–µ–∏: </b><a href='tg://user?id=547400918'><b>–ú–∏—à–∞</b></a>\n"
                             "<b>–°–æ–∑–¥–∞—Ç–µ–ª—å: </b><a href='tg://user?id=526497876'><b>–°–µ—Ä—ã–π</b></a>")
    else:
        await message.reply("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É –≤ –ª–∏—á–∫–µ —Å –±–æ—Ç–æ–º")


@dp.message_handler(commands=['advice'])
@dp.throttled(advice_anti_spam, rate=10)
async def advice(message):
    chatid = -443076596
    if message.chat.type == 'private':
        if len(message.text.split()) != 1:
            await bot.send_message(chatid, "O—Ç @%s, %s\n\n%s" %
                                   (message.from_user.username, message.from_user.full_name, message.text))

            await message.reply("–°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–≤–µ—Ç!")
        else:
            await message.answer("–°–æ–≤–µ—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
    else:
        await message.reply("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É –≤ –ª–∏—á–∫–µ —Å –±–æ—Ç–æ–º")


@dp.message_handler(regexp="!–¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ ([0-9]+)")
async def achieve(message):
    if message.from_user.id == 526497876 or message.from_user.id == 547400918:
        userid = int(message.text.split()[1])
        achieve = str(' '.join(message.text.split()[2:]))

        try:
            cur.execute("INSERT INTO Achives (UserId, Achieve) VALUES (%i, '%s')" % (userid, achieve))
        except Exception as e:
            await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å")
            conn.rollback()
        else:
            conn.commit()
            await message.answer(f"Achievement {achieve} was added to {userid}")
            cur.execute("SELECT FullName FROM Users WHERE UserID = %i" % userid)
            name = cur.fetchall()[0][0]

            await bot.send_message(userid, "üåü–°–∏—Ä–∏—É—Å —Å—Ç–∞–ª —è—Ä—á–µüåü")
            await asyncio.sleep(2)
            await bot.send_message(userid, "ü¶ú–ö—É–∫—É—à–∫–∞ —É—Å–ª—ã—à–∞–ª–∞ –ø–µ–Ω–∏–µü¶ú")
            await asyncio.sleep(2)
            await bot.send_message(userid, f"{name} –ø–æ–ª—É—á–∞–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ\n"
                                           f"<b>{achieve}</b>")


@dp.message_handler(regexp="!—É –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ ([0-9]+)")
async def achieve(message):
    if message.from_user.id == 526497876 or message.from_user.id == 547400918:

        try:
            userid = int(message.text.split()[2])
            achieve = str(' '.join(message.text.split()[3:]))
        except Exception:
            await message.reply("Not correct!\n!—É –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ id achievement")
        else:
            cur.execute("SELECT Achieve FROM ACHIVES WHERE UserId = %i AND Achieve = '%s'" % (userid, achieve))
            can_del = cur.fetchall()
            if can_del:
                cur.execute("DELETE FROM ACHIVES WHERE Achieve = '%s' AND UserId = %i" % (achieve, userid))
                conn.commit()
                await message.answer(f"Achievement {achieve} was removed from {userid}")
            else:
                await message.answer("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å ID –∏ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è")


@dp.message_handler(commands=['setmoney'])
async def setmoney(message):
    if message.from_user.id == 526497876 or message.from_user.id == 547400918:
        papaid = message.from_user.id
        howmch = (''.join((message.text.split()[1]).split(',')))
        towho = message.text.split()[2]
        try:
            if howmch.isdigit() is True and towho.isdigit() is True and howmch[0] != '+':
                if 0 <= int(howmch) < 10 ** 33:
                    cur.execute("UPDATE USERS set Money = %i WHERE UserId = %i" % (int(howmch), int(towho)))
                    await bot.send_message(papaid, "SET completed")

                else:
                    await bot.send_message(papaid, "10**33 –º–∞–∫—Å–∏–º—É–º")

        except Exception as e:
            await message.reply("Input data are not correct\n/setmoney (+)howmuch towho")
            conn.rollback()
        else:
            conn.commit()

        try:
            if howmch[0] == '+':
                if 0 < int(howmch) < 10 ** 25:
                    # –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫ –±–æ–Ω—É—Å—É
                    if len(message.text.split()) >= 4:
                        note = ' '.join(message.text.split()[3:])
                        cur.execute(
                            "UPDATE USERS set Money = Money + %i WHERE UserId = %i" % (int(howmch[1:]), int(towho)))
                        await bot.send_message(papaid, "ADDed")
                        await bot.send_message(towho, "–ë–æ–Ω—É—Å %süí∞\n%s" % (makegoodview(howmch[1:]), note))

                    else:
                        cur.execute(
                            "UPDATE USERS set Money = Money + %i WHERE UserId = %i" % (int(howmch[1:]), int(towho)))
                        conn.commit()
                        await bot.send_message(papaid, "ADDed")
                        await bot.send_message(towho, "–ë–æ–Ω—É—Å %süí∞" % await makegoodview(howmch[1:]))

                    await check_limit_money(towho)
                else:
                    await bot.send_message(papaid, "10**25 –º–∞–∫—Å–∏–º—É–º")
        except Exception as e:
            await message.reply("Input data are not correct\n/setmoney (+)howmuch towho")
            conn.rollback()
        else:
            conn.commit()


@dp.message_handler(regexp="!—Å–∫—Ä—ã—Ç—å —Å—Ç–∞—Ç—É")
async def hide_stats(message):
    if message.from_user.id == 526497876 or message.from_user.id == 547400918:
        try:
            whoid = int(message.text.split()[2])
        except Exception:
            await message.reply("Not correct input\n!—Å–∫—Ä—ã—Ç—å —Å—Ç–∞—Ç—É ID")
        else:
            try:
                cur.execute("UPDATE Users set Show_stat = False WHERE UserId = %i" % whoid)
            except Exception as e:
                await message.reply("Not correct Id")
                conn.rollback()
            else:
                conn.commit()
                #  Achevement –ù–µ—É–ª–æ–≤–∏–º—ã–π
                await message.reply("–°—Ç–∞—Ç–∞ %i —Å–∫—Ä—ã—Ç–∞" % whoid)

                cur.execute("INSERT INTO Achives (UserId, Achieve) VALUES (%i, '–ù–µ—É–ª–æ–≤–∏–º—ã–π')" % whoid)

                conn.commit()
                await message.answer(f"Achievement –ù–µ—É–ª–æ–≤–∏–º—ã–π was added to {whoid}")
                cur.execute("SELECT FullName FROM Users WHERE UserID = %i" % whoid)
                name = cur.fetchall()[0][0]

                await bot.send_message(whoid, "üåü–°–∏—Ä–∏—É—Å —Å—Ç–∞–ª —è—Ä—á–µüåü")
                await asyncio.sleep(2)
                await bot.send_message(whoid, "ü¶ú–ö—É–∫—É—à–∫–∞ —É—Å–ª—ã—à–∞–ª–∞ –ø–µ–Ω–∏–µü¶ú")
                await asyncio.sleep(2)
                await bot.send_message(whoid, f"{name} –ø–æ–ª—É—á–∞–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ\n<b>–ù–µ—É–ª–æ–≤–∏–º—ã–π</b>")


@dp.message_handler(regexp="!–æ—Ç–∫—Ä—ã—Ç—å —Å—Ç–∞—Ç—É")
async def hide_stats(message):
    if message.from_user.id == 526497876 or message.from_user.id == 547400918:
        try:
            whoid = int(message.text.split()[2])
        except Exception:
            await message.reply("Not correct input\n!–æ—Ç–∫—Ä—ã—Ç—å —Å—Ç–∞—Ç—É ID")
        else:
            try:

                cur.execute("UPDATE Users set Show_stat = True WHERE UserId = %i" % whoid)
            except Exception as e:
                await message.reply("Not correct Id")
                conn.rollback()
            else:
                conn.commit()
                await message.reply("–°—Ç–∞—Ç–∞ %i –æ—Ç–∫—Ä—ã—Ç–∞" % whoid)


@dp.message_handler(lambda msg: msg.reply_to_message is not None and msg.text == "getid")
async def s(message):
    try:
        await message.reply(message.reply_to_message.from_user.id)
    except Exception:
        pass


@dp.message_handler(text='/statslog')
async def stats(message):
    if message.from_user.id == 526497876 or message.from_user.id == 547400918:
        if message.text == '/statslog':
            stat = ''

            try:
                cur.execute("SELECT Plays FROM STATS WHERE Title = 'General'")
                AllPlays = cur.fetchall()[0][0]
                cur.execute("SELECT Won FROM STATS WHERE Title = 'General'")
                Won = cur.fetchall()[0][0]
                cur.execute("SELECT Lost FROM STATS WHERE Title = 'General'")
                Lost = cur.fetchall()[0][0]
            except Exception as e:
                pass
            else:
                try:
                    Winfactor = round((int(Won) / int(Lost)), 3)
                except Exception:
                    Winfactor = 0
                stat += f"<b>–í—Å–µ–≥–æ —Å—ã–≥—Ä–∞–Ω–æ:</b> {AllPlays}\n" \
                        f"<b>–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤—ã–∏–≥—Ä—ã—à–∞:</b> {Winfactor}\n\n"

                cur.execute("SELECT IdChat FROM STATS WHERE IdChat is not Null AND Plays > 0")
                chats = cur.fetchall()
                for i in range(len(chats)):
                    cur.execute("SELECT Title FROM STATS WHERE IDChat = %i" % chats[i][0])
                    title = cur.fetchall()[0][0]

                    cur.execute("SELECT Plays FROM STATS WHERE IDChat = %i" % chats[i][0])
                    plays = cur.fetchall()[0][0]

                    cur.execute("SELECT Won FROM STATS WHERE IDChat = %i" % chats[i][0])
                    Won = cur.fetchall()[0][0]

                    cur.execute("SELECT Lost FROM STATS WHERE IDChat = %i" % chats[i][0])
                    Lost = cur.fetchall()[0][0]

                    cur.execute("SELECT bets_num FROM STATS WHERE IDChat = %i" % chats[i][0])
                    bets_num = cur.fetchall()[0][0]

                    cur.execute("SELECT Last_activity FROM STATS WHERE IDChat = %i" % chats[i][0])
                    last_activity = cur.fetchall()[0][0]


                    try:
                        avrg_bets_num = round((int(bets_num) / int(plays)), 3)
                    except Exception:
                        avrg_bets_num = 0
                    try:
                        win_factor = round((int(Won) / int(Lost)), 3)
                    except Exception:
                        win_factor = 0

                    stat += f"Chat Id: <b>{chats[i][0]}</b>\n" \
                            f"Title: <b>{title}</b>\n" \
                            f"Plays: <b>{plays}</b>\n" \
                            f"Win Factor: <b>{win_factor}</b>\n" \
                            f"Average bets number: <b>{avrg_bets_num}</b>\n" \
                            f"Last activity: <b>{last_activity}</b>\n\n"

                await message.answer(stat)


@dp.message_handler(regexp="/statslog —Å–±—Ä–æ—Å–∏—Ç—å")
async def stats_rollback(message):
    try:
        if message.text.split()[2] == "–≤—Å–µ":
            cur.execute("UPDATE STATS set Plays = 0, Won = 0, Lost = 0, Bets_Num = 0")
            await message.answer("–í—Å–µ —Å–±—Ä–æ—à–µ–Ω–æ")
    except Exception as e:
        conn.rollback()
    else:
        conn.commit()

    try:
        if message.text.split()[2].isdigit:
            cur.execute("UPDATE STATS set Plays = 0, Won = 0, Lost = 0, Bets_Num = 0 WHERE IDChat = %s" %
                        message.text.split()[2])
            await message.answer("–°–±—Ä–æ—à–µ–Ω–æ %s" % message.text.split()[2])
    except Exception as e:
        conn.rollback()
    else:
        conn.commit()


#  |  –ó–ê–ü–£–°–ö –ò–ì–†–´  |
@dp.message_handler(commands=['kosti'])
@dp.message_handler(lambda message: message.text.lower() == '–∫–æ—Å—Ç–∏')
async def start_game(message):
    chatid = int(message.chat.id)
    if message.chat.title is not None:
        title = message.chat.title
    else:
        title = message.chat.first_name
    date = str(datetime.fromtimestamp(message.date.timestamp() + 10800))

    await Chat(chatid, title, date).add_chat_data()

    await Game(chatid).play(message)


#  –ë–†–û–°–ò–¢–¨ –ö–£–ë–ò–ö–ò
@dp.message_handler(commands=['tryasti'])
@dp.message_handler(lambda message: message.text.lower() == '—Ç—Ä—è—Å—Ç–∏')
@dp.message_handler(lambda message: message.text.lower() == '–≥–æ')
async def shake_game(message):
    chatid = message.chat.id
    userid = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –±—Ä–æ—Å–∞—Ç—å –∫—É–±–∏–∫–∏
    try:
        cur.execute("SELECT UserId FROM BETS WHERE IDChat = %i" % chatid)
        user_in_bets = cur.fetchall()
        if user_in_bets and (userid,) in user_in_bets:
            cur.execute("UPDATE GAME set Shake = True WHERE IDChat = '%i'" % chatid)
        else:
            cur.execute("UPDATE GAME set Shake = False WHERE IDChat = '%i'" % chatid)
    except Exception as exc:
        pass
    else:
        conn.commit()

    # –í—ã–≥—Ä—É–∑–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ Shake
    try:
        cur.execute("SELECT Shake FROM GAME WHERE IDChat = '%i'" % chatid)
        Shake = cur.fetchall()[0][0]
    except Exception:
        Shake = False

    # |  –ë–†–û–°–ò–¢–¨ –ö–£–ë–ò–ö–ò  |  –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–Ω—Ç–∏—Å–ø–∞–º "–¢—Ä—è—Å—Ç–∏"  |   –û—Ç—Å—Ç—Ä–æ—á–∫–∞ –≤ 30 —Å–µ–∫—É–Ω–¥ –∑–∞–ø—É—Å–∫–∞ –≤ –≥—Ä—É–ø–ø–∞—Ö
    try:
        cur.execute("SELECT shaking FROM GAME WHERE IDChat = %i" % chatid)
        shaking = cur.fetchall()[0][0]
    except Exception as e:
        pass
    else:
        if Shake is True and shaking is False:
            try:
                cur.execute("SELECT Time FROM Game WHERE IDChat = %i" % chatid)
                Time = int(cur.fetchall()[0][0])
                if Time - int(message.date.timestamp()) < 1 or chatid == userid:
                    cur.execute("UPDATE Game set Shaking = True WHERE IDChat = %i" % chatid)
                    conn.commit()
                    name = message.from_user.first_name
                    await shake(name, userid, chatid)

                    cur.execute("DELETE FROM GAME WHERE IDChat = %i" % chatid)
                    conn.commit()
                else:
                    mmes = await message.answer("–ë—Ä–æ—Å–∏—Ç—å –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ %s —Å–µ–∫" %
                                                str(Time - int(message.date.timestamp())))
                    await to_del_mess(chatid, mmes.message_id)

            except Exception as e:
                conn.rollback()
                print(e)

        if Shake is False and shaking is False:
            mes = await message.reply("–°–Ω–∞—á–∞–ª–∞ —Å–¥–µ–ª–∞–π —Å—Ç–∞–≤–∫—É")
            await to_del_mess(chatid, mes.message_id)


# –ü–†–û–í–ï–†–ö–ê –ù–ê –°–¢–ê–í–ö–£
@dp.message_handler(regexp="(\d[' ']\d)$")
@dp.message_handler(regexp="(\d[ ]\d[-]\d)$")
async def chekbet(message: types.Message):
    chatid = message.chat.id
    #    –í–´–ì–†–£–ó–ö–ê GAME
    try:
        cur.execute("SELECT Shaking FROM GAME WHERE IDChat = %i" % chatid)
        Shaking = cur.fetchall()
    except Exception as e:
        print(e)
        await message.reply("Oops, something went wrong")
    else:
        if Shaking:
            if len(message.text.split()) == 2 and Shaking[0][0] is False:
                fullname = message.from_user.full_name
                username = message.from_user.username
                userid = message.from_user.id
                await User(fullname, username, userid, chatid).add_user_data()

                await Bets(message.text, fullname, username, userid, chatid).bet_check()


# processing callback
@dp.callback_query_handler(lambda call: call.data == '1' or call.data == '2' or call.data == '3' or call.data == '3'
                                        or call.data == '4' or call.data == '5' or call.data == '6'
                                        or call.data == '1-3' or call.data == '4-6' or call.data == '1-2'
                                        or call.data == '3-4' or call.data == '5-6')
# @dp.throttled(trottled, rate=1.2)
async def process_callback_game_buttons(callback_query: types.CallbackQuery):
    chatid = callback_query.message.chat.id
    #    –í–´–ì–†–£–ó–ö–ê GAME
    try:
        cur.execute("SELECT Shaking FROM GAME WHERE IDChat = %i" % chatid)
        Shaking = cur.fetchall()
    except Exception as e:
        print(e)
        await bot.send_message(chatid, "Oops, something went wrong")
    else:
        if Shaking:
            if Shaking[0][0] is False:
                userid = callback_query.from_user.id
                fullname = callback_query.from_user.full_name
                username = callback_query.from_user.username
                await User(fullname, username, userid, chatid).add_user_data()

                text = f'5 {callback_query.data}'
                await Bets(text, fullname, username, userid, chatid).bet_check()
                await bot.answer_callback_query(callback_query.id)


# %–ø –ü–û–í–¢–û–† –°–¢–ê–í–û–ö
@dp.message_handler(text='%–ø')
async def repeat_bet(message):
    chatid = message.chat.id
    #    –í–´–ì–†–£–ó–ö–ê GAME
    try:
        cur.execute("SELECT Shaking FROM GAME WHERE IDChat = %i" % chatid)
        Shaking = cur.fetchall()
    except Exception as e:
        print(e)
        await message.reply("Oops, something went wrong")
    else:
        if Shaking:
            if Shaking[0][0] is False:
                userid = message.from_user.id
                fullname = message.from_user.full_name
                username = message.from_user.username
                await User(fullname, username, userid, chatid).add_user_data()
                text = ' '
                await Bets(text, fullname, username, userid, chatid).repeat_bet(message)


# %—É –£–î–í–û–ò–¢–¨ –í–°–ï –°–¢–ê–í–ö–ò
@dp.message_handler(text='%—É')
async def double_bet(message):
    chatid = message.chat.id
    #    –í–´–ì–†–£–ó–ö–ê GAME
    try:
        cur.execute("SELECT Shaking FROM GAME WHERE IDChat = %i" % chatid)
        Shaking = cur.fetchall()
    except Exception as e:
        print(e)
        await message.reply("Oops, something went wrong")
    else:
        if Shaking:
            if Shaking[0][0] is False:
                userid = message.from_user.id
                fullname = message.from_user.full_name
                username = message.from_user.username
                await User(fullname, username, userid, chatid).add_user_data()
                text = ' '
                await Bets(text, fullname, username, userid, chatid).double_bet(message)


@dp.message_handler(lambda message: message.text.lower() == '—Å—Ç–∞–≤–∫–∏')
async def user_bets(message):
    chatid = message.chat.id
    #    –í–´–ì–†–£–ó–ö–ê GAME
    try:
        cur.execute("SELECT Shaking FROM GAME WHERE IDChat = %i" % chatid)
        Shaking = cur.fetchall()
    except Exception as e:
        print(e)
        await message.reply("Oops, something went wrong")
    else:
        if Shaking:
            if Shaking[0][0] is False:
                fullname = message.from_user.full_name
                username = message.from_user.username
                userid = message.from_user.id
                await User(fullname, username, userid, chatid).add_user_data()
                await User(fullname, username, userid, chatid).user_bets(message)


# canceling all user bets
@dp.message_handler(lambda msg: msg.text.lower() == '–æ—Ç–º–µ–Ω–∞')
async def cancelbets(message):
    chatid = message.chat.id
    #    –í–´–ì–†–£–ó–ö–ê GAME
    try:
        cur.execute("SELECT Shaking FROM GAME WHERE IDChat = %i" % chatid)
        Shaking = cur.fetchall()
    except Exception as e:
        print(e)
        await message.reply("Oops, something went wrong")
    else:
        if Shaking:
            if Shaking[0][0] is False:
                fullname = message.from_user.full_name
                username = message.from_user.username
                userid = message.from_user.id
                await User(fullname, username, userid, chatid).add_user_data()
                await User(fullname, username, userid, chatid).cancel_bets(message)


# all chat logs
@dp.message_handler(lambda msg: msg.text.lower() == '–ª–æ–≥–∏')
async def logsgame(message):
    chatid = message.chat.id

    if message.chat.title is not None:
        title = message.chat.title
    else:
        title = message.chat.first_name
    date = str(datetime.fromtimestamp(message.date.timestamp() + 10800))

    await Chat(chatid, title, date).add_chat_data()

    await Chat(chatid, title, date).logs(message)


#  –ë–ê–õ–ê–ù–° –ò–ì–†–û–ö–ê
@dp.message_handler(commands=['lave'])
@dp.message_handler(lambda message: message.text.lower() == '–ª–∞–≤—ç')
async def usermoney(message):
    name = message.from_user.full_name
    username = message.from_user.username
    userid = message.from_user.id
    chatid = message.chat.id

    await User(name, username, userid, chatid).add_user_data()

    await User(name, username, userid, chatid).lave(message)


#  users stats
@dp.message_handler(text='!—Å—Ç–∞—Ç–∞')
async def statuser(message):
    chatid = message.chat.id
    if message.reply_to_message is not None and message.reply_to_message.from_user.is_bot is False:
        userid = message.reply_to_message.from_user.id
        fullname = message.reply_to_message.from_user.full_name
        username = message.reply_to_message.from_user.username

        cur.execute("SELECT Show_stat FROM Users WHERE UserId = %i" % userid)
        Show_stat = cur.fetchall()[0][0]

        if Show_stat is True or message.from_user.id == 526497876 or message.from_user.id == 547400918:
            await User(fullname, username, userid, chatid).profile(message)

        else:
            await message.reply("–ù–∞ —Ç–∞–∫–æ–µ –ª—É—á—à–µ –Ω–µ —Å–º–æ—Ç—Ä–µ—Ç—å")

    else:
        userid = message.from_user.id
        fullname = message.from_user.full_name
        username = message.from_user.username
        await User(fullname, username, userid, chatid).profile(message)


@dp.message_handler(text='!—Å—Ç–∞—Ç–∞ —Å–±—Ä–æ—Å–∏—Ç—å')
async def drop_stats(message):
    try:
        if message.text.lower().split()[0] == '!—Å—Ç–∞—Ç–∞' and message.text.lower().split()[1] == "—Å–±—Ä–æ—Å–∏—Ç—å":
            userid = message.from_user.id
            cur.execute("UPDATE USERS set WON = 0, LOST = 0, Plays = 0 WHERE UserId = %i" % userid)
            await message.answer("–°—Ç–∞—Ç–∞ —Å–±—Ä–æ—à–µ–Ω–∞")
    except Exception as e:
        await message.reply("Oops. something went wrong. Try again.")
    else:
        conn.commit()


@dp.message_handler(regexp="!—Å—Ç–∞—Ç–∞ —Å–±—Ä–æ—Å–∏—Ç—å ([0-9]+)")
async def drop_smbdys_stat(message):
    try:
        if message.text.split()[2].isdigit():
            userid = message.text.split()[2]
            cur.execute("UPDATE USERS set WON = 0, LOST = 0, Plays = 0 WHERE UserId = %i" % int(userid))
            await bot.send_message(message.chat.id, "–°—Ç–∞—Ç–∞ —Å–±—Ä–æ—à–µ–Ω–∞ %s" % userid)
            conn.commit()
    except Exception as e:
        await message.reply("Oops. something went wrong. Try again.")


@dp.message_handler(text='!—Ä–µ–π—Ç–∏–Ω–≥')
async def top(message):
    if message.chat.id != message.from_user.id:

        try:
            rate = []
            chatid = message.chat.id
            cur.execute("SELECT UserId FROM chatusers WHERE IDChat = %i" % chatid)
            topofchat = cur.fetchall()
            topchik = ""
            q = 0
            for i in topofchat:
                cur.execute("SELECT UserId, FullName, Money FROM USERS ORDER BY Money")
                top = cur.fetchall()
                for k in range(len(top)):
                    # if top[k][0] != 547400918 and top[k][0] != 526497876:
                    if i[0] == top[k][0]:
                        rate.append(top[k][1:])

            ratesort = sorted(rate, key=lambda money: money[1])[::-1]

            if len(ratesort) <= 30:
                for i in range(len(ratesort)):
                    q += 1
                    topchik += str(q) + '. ' + str(ratesort[i][0]) + ' ' + await makegoodview(ratesort[i][1]) + '\n'
            else:
                for i in range(30):
                    q += 1
                    topchik += str(q) + '. ' + str(ratesort[i][0]) + ' ' + await makegoodview(ratesort[i][1]) + '\n'

            await message.answer(topchik)
        except Exception as e:
            await message.reply("Oops, something went wrong")
            print(e)


@dp.message_handler(text='!—Ä–µ–π—Ç–∏–Ω–≥ 10')
async def top_10(message):
    if message.chat.id != message.from_user.id:

        try:
            rate = []
            chatid = message.chat.id
            cur.execute("SELECT UserId FROM chatusers WHERE IDChat = %i" % chatid)
            topofchat = cur.fetchall()
            topchik = ""
            q = 0
            for i in topofchat:
                cur.execute("SELECT UserId, FullName, Money FROM USERS ORDER BY Money")
                top = cur.fetchall()
                for k in range(len(top)):
                    # if top[k][0] != 547400918 and top[k][0] != 526497876:
                    if i[0] == top[k][0]:
                        rate.append(top[k][1:])
            ratesort = sorted(rate, key=lambda money: money[1])[::-1]

            if len(ratesort) <= 10:
                for i in range(len(ratesort)):
                    q += 1
                    topchik += str(q) + '. ' + str(ratesort[i][0]) + ' ' + await makegoodview(ratesort[i][1]) + '\n'
            else:
                for i in range(10):
                    q += 1
                    topchik += str(q) + '. ' + str(ratesort[i][0]) + ' ' + await makegoodview(ratesort[i][1]) + '\n'

            await message.answer(topchik)
        except Exception as e:
            print(e)
            await message.reply("Oops, something went wrong")


# –ü–ï–†–ï–î–ê–¢–¨ –î–ï–ù–¨–ì–ò
@dp.message_handler(regexp="(^[+][–≥])([' ']*)(\d)")
async def transfer_money(message):
    try:
        if 0 < int(''.join(message.text[2:].split(','))) < 10 ** 18 and message.reply_to_message is not None:
            name = message.from_user.full_name
            username = message.from_user.username
            userid = message.from_user.id
            chatid = message.chat.id
            await User(name, username, userid, chatid).add_user_data()
            try:

                if message.reply_to_message.from_user.is_bot is False:
                    howmuch = int(''.join(message.text[2:].split(',')))
                    whoid = message.reply_to_message.from_user.id
                    whoname = message.reply_to_message.from_user.full_name
                    whousername = message.reply_to_message.from_user.username
                    if userid != whoid:
                        await User(whoname, whousername, whoid, chatid).add_user_data()
                        cur.execute("SELECT Money FROM USERS WHERE UserId = %i" % userid)
                        balance = int(cur.fetchall()[0][0])
                        if howmuch <= balance:
                            cur.execute(
                                "UPDATE USERS set Money = Money - %i WHERE UserId = %i" % (howmuch, userid))
                            cur.execute(
                                "UPDATE USERS set Money = Money + %i WHERE UserId = %i" % (howmuch, whoid))
                            await bot.send_message(chatid,
                                                   "<a href='tg://user?id=%i'>%s</a> –ø–µ—Ä–µ–¥–∞–ª "
                                                   "<a href='tg://user?id=%i'>%s</a> "
                                                   "%s –≥—Ä—ã–≤–µ–Ω—å" % (userid, name, whoid, whoname, makegoodview(howmuch)))

                        else:
                            await bot.send_message(chatid, "–ù–µ—Ç—É —Å—Ç–æ–ª—å–∫–æ", reply_to_message_id=message.message_id)

                    await check_limit_money(whoid)
            except Exception as e:
                await message.reply("Oops. something went wrong. Try again.")
            else:
                conn.commit()
        elif 10 ** 18 < int(''.join(message.text[2:].split(','))):
            await message.reply("–ü–µ—Ä–µ–¥–∞—Ç—å –º–æ–∂–Ω–æ –Ω–µ –±–æ–ª—å—à–µ 1,000,000,000,000,000,000 –∑–∞ —Ä–∞–∑")
    except Exception:
        await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–¥–∞—Ç—å –¥–µ–Ω—å–≥–∏")


@dp.message_handler(commands=['bonuslave'])
@dp.message_handler(lambda message: message.text.lower() == '–±–æ–Ω—É—Å')
async def bonus(message):
    chatid = message.chat.id
    fullname = message.from_user.full_name
    bonuserid = message.from_user.id
    username = message.from_user.username

    await User(fullname, username, bonuserid, chatid).add_user_data()
    await Bonus(fullname, bonuserid, chatid).bonus(message)


#  processing bonus callback
@dp.callback_query_handler(lambda call_bonus: call_bonus.data == '–ë—Ä–æ—Å–∏—Ç—å')
@dp.throttled(bonus_throttled, rate=0.7)
async def process_callback_bonus_buttons(callback_query: types.CallbackQuery):
    chatid = callback_query.message.chat.id
    userid = callback_query.from_user.id
    fullname = callback_query.from_user.first_name
    mesid = callback_query.message.message_id

    await Bonus(fullname, userid, chatid).click_1(mesid, callback_query)


#  processing bonus second click step callback  --> def coef()
@dp.callback_query_handler(lambda call_bonus: call_bonus.data == '–ë—Ä–æ—Å–∏—Ç—å1')
@dp.throttled(bonus_throttled, rate=0.7)
async def process_callback_bonus_buttons(callback_query: types.CallbackQuery):
    chatid = callback_query.message.chat.id
    userid = callback_query.from_user.id
    fullname = callback_query.from_user.first_name
    mesid = callback_query.message.message_id

    await Bonus(fullname, userid, chatid).click_2(mesid, callback_query)


@dp.callback_query_handler(lambda call_bonus: call_bonus.data == '–ë—Ä–æ—Å–∏—Ç—å2')
@dp.throttled(bonus_throttled, rate=0.7)
async def process_callback_bonus_buttons(callback_query: types.CallbackQuery):
    chatid = callback_query.message.chat.id
    userid = callback_query.from_user.id
    fullname = callback_query.from_user.first_name
    mes_id = callback_query.message.message_id

    await Bonus(fullname, userid, chatid).click_3(mes_id, callback_query)


@dp.message_handler(regexp='!—Ä–∞–∑–¥–∞—á–∞ ([0-9]+)')
async def giveaway(message):
    if message.text[:8] == '!—Ä–∞–∑–¥–∞—á–∞':
        userid = message.from_user.id
        chatid = message.chat.id
        # if userid != chatid:                      #TODO
        try:
            cur.execute(f"SELECT Giveaway_time FROM Users WHERE UserId = {userid}")
            time_for_giveaway = int(cur.fetchall()[0][0])
        except Exception as e:
            print(e)
        else:
            if int(message.date.timestamp()) > time_for_giveaway or time_for_giveaway == 0:
                if 100000 <= int(message.text.split()[1]) <= 500 * 10**9:
                    created = await create_db(chatid)
                    if created == 0:
                        pass
                    else:
                        await start_giveaway(message)

                else:
                    await message.reply("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è —Ä–∞–∑–¥–∞—á–∏ 100 000\n"
                                        "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è - 500 –º–∏–ª–ª–∏–∞—Ä–¥–æ–≤")
            else:
                await message.reply("–£—Å—Ç—Ä–∞–∏–≤–∞—Ç—å —Ä–∞–∑–¥–∞—á—É –º–æ–∂–Ω–æ —Ä–∞–∑ –≤ 1 —á–∞—Å")


@dp.callback_query_handler(lambda call_bonus: call_bonus.data == '—Ä–∞–∑–¥–∞—á–∞')
@dp.throttled(rate=1.3)
async def scores(callback_query: types.CallbackQuery):
    chatid = callback_query.message.chat.id
    userid = callback_query.from_user.id
    fullname = callback_query.from_user.full_name
    username = callback_query.from_user.username

    try:
        cur.execute(f"SELECT UserId FROM GIVEAWAY{abs(chatid)} WHERE How_many IS NOT NULL")
        not_for_him = cur.fetchall()[0][0]
        if userid != not_for_him:
            await User(fullname, username, userid, chatid).add_user_data()
            cur.execute(f"SELECT count(Value) FROM GIVEAWAY{abs(chatid)} WHERE UserId = {userid}")
            to_count = int(cur.fetchall()[0][0])
            if to_count == 1:
                cur.execute(f"UPDATE GIVEAWAY{abs(chatid)} set Value = Value + 1 WHERE UserId = {userid}")
                conn.commit()
            elif to_count < 1:
                cur.execute(f"INSERT INTO GIVEAWAY{abs(chatid)} (FullName, UserId, Value)"
                            f" VALUES ('{fullname}', {userid}, 1)")
                conn.commit()
            await bot.answer_callback_query(callback_query.id)
        else:
            await bot.answer_callback_query(callback_query.id, "–¢—ã –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä")
    except Exception:
        pass


@dp.errors_handler(exception=TelegramAPIError)
async def error_handler(update, e):
    print(e)
    return True
